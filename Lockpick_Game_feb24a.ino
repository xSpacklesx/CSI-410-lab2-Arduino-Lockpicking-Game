#include "arduino_secrets.h"
// BSEC Software Library - Version: 1.6.1480
#include <bsec.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/06817484-cf7a-48e4-8043-64eea8a3479f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float currAttempt;
  float sweetSpot;
  bool newNumFlag;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
MKRIoTCarrier carrier;

float target;

uint32_t closeColor = carrier.leds.Color(0, 255, 0);
uint32_t farColor = carrier.leds.Color(255, 0, 0);


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  CARRIER_CASE = false;
  carrier.begin();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  currAttempt = 0.0;
  sweetSpot = 0.0;
  
  newRand();
}

float x, y, z;

void loop() {
  ArduinoCloud.update();
  // Your code here 
  carrier.Buttons.update();
  
  if (carrier.IMUmodule.accelerationAvailable()){
    if (carrier.Buttons.onTouchDown(TOUCH2)){
      carrier.IMUmodule.readAcceleration(x, y, z);
      currAttempt = x;
      Serial.print("Attempt: ");
      Serial.println(x);
      checkLock(x);
    }
  }
}

void newRand(){
  float retNum = random(-99, 99);
  retNum /= 100;
  carrier.display.fillScreen(0x0000);
  Serial.print("Lock Spot: ");
  Serial.println(retNum);
  target = retNum;
  sweetSpot = retNum;
  carrier.display.fillScreen(0x07FF);
}

void checkLock(float currPos){
  float lowTarget = target - 0.02;
  float highTarget = target + 0.02;
  if ((currPos <= highTarget) && (currPos >= lowTarget)){
    Serial.println("Got it");
    carrier.display.fillScreen(0x07E0);
    carrier.leds.fill(closeColor, 0, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(3000);
    carrier.leds.clear();
    carrier.leds.show();
  }
  else if ((currPos > target + 0.5) || (currPos < target - 0.5)){
    Serial.println("Not even close");
    carrier.display.fillScreen(0xF800);
    carrier.leds.fill(farColor, 0, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(1500);
    carrier.leds.clear();
    carrier.leds.show();
  }
  else if ((currPos >= target + 0.4) || (currPos <= target - 0.4)){
    Serial.println("Starting to get there");
    carrier.display.fillScreen(0xF800);
    carrier.leds.fill(closeColor, 0, 0);
    carrier.leds.fill(farColor, 1, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(1500);
    carrier.leds.clear();
    carrier.leds.show();
  }
  else if ((currPos >= target + 0.3) || (currPos <= target - 0.3)){
    Serial.println("Getting closer");
    carrier.display.fillScreen(0xF800);
    carrier.leds.fill(closeColor, 0, 2);
    carrier.leds.fill(farColor, 2, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(1500);
    carrier.leds.clear();
    carrier.leds.show();
  }
  else if ((currPos >= target + 0.2) || (currPos <= target - 0.2)){
    Serial.println("Getting even closerer");
    carrier.display.fillScreen(0xF800);
    carrier.leds.fill(closeColor, 0, 3);
    carrier.leds.fill(farColor, 3, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(1500);
    carrier.leds.clear();
    carrier.leds.show();
  }
  else if ((currPos >= target + 0.03) || (currPos <= target - 0.03)){
    Serial.println("Almost there");
    carrier.display.fillScreen(0xF800);
    carrier.leds.fill(closeColor, 0, 4);
    carrier.leds.fill(farColor, 4, 5);
    carrier.leds.setBrightness(50);
    carrier.leds.show();
    delay(1500);
    carrier.leds.clear();
    carrier.leds.show();
  }
}



/*
  Since NewNumFlag is READ_WRITE variable, onNewNumFlagChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNewNumFlagChange()  {
  // Add your code here to act upon NewNumFlag change
  if (newNumFlag){
    newRand();
  }
}

/*
  Since SweetSpot is READ_WRITE variable, onSweetSpotChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSweetSpotChange()  {
  // Add your code here to act upon SweetSpot change
}

/*
  Since CurrAttempt is READ_WRITE variable, onCurrAttemptChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCurrAttemptChange()  {
  // Add your code here to act upon CurrAttempt change
}